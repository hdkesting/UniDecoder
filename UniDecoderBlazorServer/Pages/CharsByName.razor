@page "/name"
@page "/name/{IntParam:int}"
@page "/name/{Name}"

@inject UnidecoderService myservice
@inject ProtectedSessionStorage sessionStore

  <h2>Search by name</h2>
  <p>
    Type in a partial name of a character or type in its code to find out about it.
    When you type in a numerical code (decimal or hexadecimal), some characters around it will also be shown.
    Note that some values are recognized as both decimal and hexadecimal &ndash; meaning you get more results.
  </p>
  <p>
    The characters are known only by their official (english) name. When you search for something specific, you may need to try some alternative names.
  </p>
  <p>
    Examples: <a class="sample" href="name/phone">phone</a>,
    <a class="sample" href="name/star">star</a> or
    <a class="sample" href="name/twelve">twelve</a>.
  </p>
  <p>
    Or a number <a class="sample" href="name/0x20AC">0x20AC</a> or <a class="sample" href="name/8364">8364</a> (both the same &euro; sign).
  </p>
  <p>
    Or multiple words: <a class="sample" href="name/digit%20circled">digit circled</a>
  </p>
  <p>
    Or if you want to find <em>un</em>circled digits: <a class="sample" href="name/digit%20-circled">digit <mark>-</mark>circled</a>
  </p>
  <p>
    The name or code to search for:
  </p>
    <input  type="text" placeholder="The name to find" autofocus required
           class="form-control" @bind=SearchText @bind:event="oninput"/>

@if (!string.IsNullOrEmpty(SearchText))
{
    <div>Shareable link for <a class="sample" href="name/@Uri.EscapeDataString(SearchText)">@SearchText</a></div>
}

<CharListInfinite Characters=Characters EmptyListMessage="Please enter a text to search for." />

@code {
    const string sessionkey = "charsearch";
    private string? _searchtext;

    [Parameter]
    public int? IntParam { get; set; }

    [Parameter]
    public string? Name { get; set; }

    public string? SearchText
    {
        get => _searchtext;
        set
        {
            _searchtext = value;
            PerformSearch();
        }
    }

    public List<CodepointInfo>? Characters{ get; set; }

    public bool ResultsIsCapped{ get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (IntParam.HasValue)
        {
            SearchText = IntParam.Value.ToString(CultureInfo.InvariantCulture);
        }
        else if (!string.IsNullOrWhiteSpace(Name))
        {
            SearchText = Name;
        }
        else
        {
            var storedResult = await sessionStore.GetAsync<string>(sessionkey);
            SearchText = storedResult.Success ? storedResult.Value : string.Empty;
        }
    }

    private void PerformSearch()
    {
        // System.Diagnostics.Debug.WriteLine(SearchText);
        if (!string.IsNullOrWhiteSpace(SearchText))
        {
            // try and parse the search value as an integer or hex value.
            int? codepoint = ParseAsDecimal(SearchText) ?? ParseAsHex(SearchText);

            if (codepoint.HasValue)
            {
                Characters = myservice.FindAroundValue(codepoint.Value);
                ResultsIsCapped = false;
            }
            else
            {
                // regular search
                Characters = myservice.FindByName(SearchText, capped:false);
                ResultsIsCapped = Characters.Count >= myservice.MaxResults;
            }

            Task.Run(async () => await sessionStore.SetAsync(sessionkey, SearchText));
        }
        else
        {
            Characters = new List<CodepointInfo>();
            ResultsIsCapped = false;
            Task.Run(async () => await sessionStore.DeleteAsync(sessionkey));
        }
    }

    private static int? ParseAsDecimal(string value)
    {
        return int.TryParse(value, out int res) ? res : default(int?);
    }

    private static int? ParseAsHex(string value)
    {
        // ignore some usual prefixes
        if (value.StartsWith("0x", System.StringComparison.OrdinalIgnoreCase) || value.StartsWith("U+", System.StringComparison.OrdinalIgnoreCase))
        {
            value = value.Substring(2);
        }

        return int.TryParse(
                value,
                System.Globalization.NumberStyles.HexNumber,
                System.Globalization.CultureInfo.InvariantCulture,
                out int code)
            ? code
            : default(int?);
    }
}
