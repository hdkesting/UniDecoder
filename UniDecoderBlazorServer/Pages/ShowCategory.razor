@page "/cat"
@page "/cat/{CategoryName}"
@inject UnidecoderService myservice

  <h2>Search by category</h2>
  <p>Characters belong to a category. Select a category below to see its characters.</p>
  <p>Some characters may be replaced by an empty rectangle: this means that the current font (as installed at <em>your</em> side) cannot display it.</p>
  <p>
    Examples: <a class="sample" href="cat/Uppercase%20Letter">Uppercase letter</a>,
    <a class="sample" href="cat/Other%20Number">Other Number</a> or
    <a class="sample" href="cat/Math%20Symbol">Math Symbol</a>.
  </p>

@if (Categories is not null)
{
    <select class="form-control" @bind=CategoryName title="Select a category to show">
        @foreach (var cat in Categories)
        {
            <option value=@cat>@cat</option>
        }
    </select>
}
@if (!string.IsNullOrEmpty(CategoryName))
{
    <div>Shareable link for <a class="sample" href="cat/@Uri.EscapeDataString(CategoryName)">@CategoryName</a></div>
}

<CharListInfinite Characters=Characters EmptyListMessage="Please select a category to investigate." CountMessageFormat="This category contains {0} characters." />

@code {
    private string? _categoryName;

    [Parameter]
    public string? CategoryName
    {
        get => _categoryName;
        set
        {
            _categoryName = value;
            PerformSearch();
        }
    }

    private List<CodepointInfo>? Characters{ get; set; }

    private List<string>? Categories { get; set; }

    protected override void OnInitialized()
    {
        Categories = myservice.GetAllCategories()
            .Select(di => di.Value)
            .Where(n => n != "Other Not Assigned")
            .OrderBy(n => n).ToList();
        if (string.IsNullOrEmpty(CategoryName))
        {
            CategoryName = "Lowercase Letter";
        }
    }

    private void PerformSearch()
    {
        if (!string.IsNullOrEmpty(CategoryName))
        {
            Characters = myservice.GetCharactersOfCategory(CategoryName);
        }
        else
        {
            Characters = new List<CodepointInfo>();
        }
    }
}
