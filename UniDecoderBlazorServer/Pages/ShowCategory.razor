@page "/cat"
@page "/cat/{CategoryName}"
@using UniDecoderBlazorServer.Models
@inject UnidecoderService myservice

  <h2>Search by category</h2>
  <p>Characters belong to a category. Select a category below to see its characters.</p>
  <p>Some characters may be replaced by an empty rectangle: this means that the current font (as installed at <em>your</em> side) cannot display it.</p>
  <p>
    Examples: <a class="sample" href="/cat/Uppercase%20Letter">Uppercase letter</a>,
    <a class="sample" href="/cat/Other%20Number">Other Number</a> or
    <a class="sample" href="/cat/Math%20Symbol">Math Symbol</a>.
  </p>
@*  <form>
    <select id="catSelect" class="form-control" [(ngModel)]="categoryName" name="catName">
      <option *ngFor="let category of categories | async" value="{{category.name}}">{{category.name}}</option>
    </select>
  </form>
  <p *ngIf="categoryName">Shareable link to category <a class="sample" [routerLink]="['/cat']" [queryParams]="{cat: categoryName}">{{categoryName}}</a></p>
  <div class="spinner" [hidden]="!getting">
    <img src="/images/spin.svg" alt="busy ..." width="80" height="80" role="spinbutton" />
  </div>
  <app-char-list [characters]="result | async">&hellip;</app-char-list>
*@

@if (Categories is not null)
{
    <select class="form-control" @bind=CategoryName>
        @foreach (var cat in Categories)
        {
            <option value=@cat>@cat</option>
        }
    </select>
}
@if (!string.IsNullOrEmpty(CategoryName))
{
    <div>Shareable link for <a class="sample" href="/cat/@Uri.EscapeDataString(CategoryName)">@CategoryName</a></div>
}

@if (Characters is not null && Characters.Any())
{
    <p>This category contains @Characters.Count characters.</p>
    <section>
    @foreach(var ch in Characters)
    {
        <CharData Character=@ch/>
    }
    </section>
}
else
{
    <p>Please select a block to investigate.</p>
}

@code {
    private string? _categoryName;

    [Parameter]
    public string? CategoryName
    {
        get => _categoryName;
        set
        {
            _categoryName = value;
            PerformSearch();
        }
    }

    private List<CodepointInfo>? Characters{ get; set; }

    private List<string>? Categories { get; set; }

    protected override void OnInitialized()
    {
        Categories = myservice.GetAllCategories().Select(di => di.Value).OrderBy(n => n).ToList();
        if (string.IsNullOrEmpty(CategoryName))
        {
            CategoryName = "Lowercase Letter";
        }
    }

    private void PerformSearch()
    {
        if (!string.IsNullOrEmpty(CategoryName))
        {
            Characters = myservice.GetCharactersOfCategory(CategoryName);
        }
    }
}
