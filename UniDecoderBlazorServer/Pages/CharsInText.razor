@page "/text"
@page "/text/{TextParam}"

@using System.Web
@inject UnidecoderService myservice
@inject ProtectedSessionStorage sessionStore

<PageTitle>Characters in text</PageTitle>

<h2>Characters in a text</h2>
<div>Type in (or copy &amp; paste in) some text in the field below. Information about all characters in that text will then be shown.</div>
<div>
  For example:
  <dl>
    <dt><a class="sample" href="text/@Uri.EscapeDataString("Cre&#x0300;me brûlée")">Cre&#x0300;me brûlée</a></dt>
    <dd>A phrase with accented letters</dd>
    <dt><a class="sample" href="text/@Uri.EscapeDataString("1× 🍕 à €1,‒")">1× 🍕 à €1,‒</a></dt>
    <dd>More exotic "letters" are possible</dd>
    <dt>
      <a class="sample" href="text/@Uri.EscapeDataString("Рhishy@Μicrοsοﬅ.com")">Рhishy@Μicrοsοﬅ.com</a> or
      <a class="sample" href="text/@Uri.EscapeDataString("https://аррӏе.com")">https://аррӏе.com</a>
    </dt>
    <dd>You can even detect some phishy addresses (look closely at the letters)</dd>
  </dl>
</div>
<div>
    <p>Type or paste your text to split into characters:</p>
    <input placeholder="Enter the text to inspect" autofocus required
           class="form-control" @bind=SearchText @bind:event="oninput"/>
    @* @bind is two-way binding, @bind:event="oninput" updates the binding on every keystroke *@
</div>

@if (!string.IsNullOrEmpty(SearchText))
{
    <div>Shareable link for <a class="sample" href="text/@Uri.EscapeDataString(SearchText)">@SearchText</a></div>
}

<CharList Characters=Characters EmptyListMessage="Please enter a text to investigate." />

@code {
    const string sessionkey = "textsearch";
    private string? _searchText;

    public string? SearchText
    {
        get => _searchText;
        set
        {
            _searchText = value;
            PerformSearch();
        }
    }

    [Parameter]
    public string? TextParam { get; set; }

    public List<CodepointInfo>? Characters{ get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrWhiteSpace(TextParam))
        {
            SearchText = HttpUtility.HtmlDecode(Uri.UnescapeDataString(TextParam));
        }
        else
        {
            var storedResult = await sessionStore.GetAsync<string>(sessionkey);
            SearchText = storedResult.Success ? storedResult.Value : string.Empty;
        }
    }

    private void PerformSearch()
    {
        if (!string.IsNullOrWhiteSpace(SearchText))
        {
            Characters = myservice.ListCharacters(SearchText);
            Task.Run(async () => await sessionStore.SetAsync(sessionkey, SearchText));
        }
        else
        {
            Characters = new List<CodepointInfo>();
            Task.Run(async () => await sessionStore.DeleteAsync(sessionkey));
        }
    }
}
